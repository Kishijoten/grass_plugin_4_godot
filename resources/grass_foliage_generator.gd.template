#!grass_plugin v1.1.0
##################################################################################
# file: {%file_name}                                                             #
##################################################################################
#  This file is part of:                                                         #
#  {%project_name}                                                               #
##################################################################################
#  Copyright (c) {%year} {%copyright_holders}                                    #
#                                                                                #
#  Permission is hereby granted, free of charge, to any person obtaining a copy  #
#  of this software and associated documentation files (the "Software"), to deal #
#  in the Software without restriction, including without limitation the rights  #
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell     #
#  copies of the Software, and to permit persons to whom the Software is         #
#  furnished to do so, subject to the following conditions:                      #
#                                                                                #
#  The above copyright notice and this permission notice shall be included in    #
#  all copies or substantial portions of the Software.                           #
#                                                                                #
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR    #
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,      #
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE   #
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER        #
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, #
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN     #
#  THE SOFTWARE.                                                                 #
##################################################################################
#
tool
extends Spatial

# distance between elements
var grass_step = {%grass_step}
# arrays temporary store data
var mesh_layers_data = [{%mesh_list}]
var layer_names = [{%layer_names}]
var space_division_size = Vector3({%division_size})
# (only useful in editor)
# randomization = {%randomization} 
# {%binary_filename}

# data from grass
var data = [{%data_entry}]


# this change far and near distances from meshes using offset to
# change it usin next level. On reach last elements it make hidden
func performance_change(offset):
	for layer in mesh_layers_data:
		# hide unecessary layers levels
		if offset>0:
			for lod in range(offset):
				for i in layer[lod].lods:
					i.hide()
		var of = offset
		var index = 0
		if of > layer.size():
			of = layer.size()-of
			if of<0:
				of = 0
		for lod_i in range(of,layer.size()):
			var lodR = layer[index]
			var lod = layer[lod_i]
			if of>= layer.size():
				for i in lod.lods:
					i.hide()
			else:
				var near = lodR.near
				var far = lodR.far
				for i in lod.lods:
					i.set_draw_range_begin(near)
					i.set_draw_range_end(far)
					if not i.is_visible():
						i.show()
			of += 1
			index += 1

#######
# mound the entire scene
#######
func _ready():
	var size = get_parent().get_aabb().size
	var msize = get_parent().get_aabb().size/2
	msize.y = 0
	var start = get_parent().get_aabb().pos
	start.y = 0
	space_division_size.y = 0
	for layer_index in range(mesh_layers_data.size()):
		var layer = Spatial.new()
		layer.set_name(layer_names[layer_index])
		add_child(layer)
		var mesh_lvl_data = mesh_layers_data[layer_index]
		var layer_data = data[layer_index]
		var division_index = 0
		for mz in range(ceil(size.z/space_division_size.z)):
			for mx in range(ceil(size.x/space_division_size.x)):
				var dt = data[layer_index][division_index]
				division_index += 1
				if dt.size():
					var pos = start + space_division_size*0.5 + Vector3(mx, 0, mz) * space_division_size
					for lod in mesh_lvl_data:
						var multimesh_i = MultiMeshInstance.new()
						var multimesh = MultiMesh.new()
						if lod.resource == null:
							lod.resource = ResourceLoader.load(lod.mesh,'Mesh')
						multimesh.set_mesh(lod.resource)
						multimesh_i.set_multimesh(multimesh)
						multimesh_i.set_draw_range_begin(lod.near)
						multimesh_i.set_draw_range_end(lod.far)
						multimesh_i.set_translation(pos)
						if lod.material_override != '':
							if lod.material == null:
								lod.material = ResourceLoader.load(lod.material_override,'Material')
							multimesh_i.set_material_override(lod.material)
						lod.lods.append(multimesh_i)
						multimesh.set_instance_count( dt.size()/5 )
						var inst = 0
						for i in range(0,dt.size(),5):
							var s = dt[i]
							var bs = Matrix3().scaled(Vector3(s,s,s)).rotated(Vector3(0,1,0),dt[i+1])
							var tr = Transform(bs,Vector3(dt[i+2],dt[i+3],dt[i+4]))
							multimesh.set_instance_transform(inst, tr)
							inst += 1
						multimesh.generate_aabb()
						layer.add_child(multimesh_i)
	# clean memory
	data = null
	

